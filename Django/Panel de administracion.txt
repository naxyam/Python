Panel de Administracion Django
Usuario: root
password: admin


En los archivos del proyecto hay una carpeta que se llama admin.py, este es el archivo que debemos abrir,  en este archivo, debbemos agregar los modelos que estan en el archivo models.py que realmente son las tablas de la bbase de datos, y los agregamos de la siguiente manera:

from gestionnPedidos.models import Cliente, Articulos, Pedidos

y luego registramos cada tabla dela siguiente manerea:


admin.site.register(Cliente)


luego abrimos el panel de administración con la dirección que usamos para la ejecución de los programas y adicional admin al final, de la siguiente manera:

http://localhost:8000/admin/

Allí se nos abrirá el panel de administración, debemos crear el usuario y la contraseña del usuario superusuario, esto lo hacemos desde el cmd:

Primero cerramos el servidor y digitamos:

python manage.py createsuperuser

Aquí nos pide un nombre de usuario, se lo escribimos

Nos pide un correo electrónico, se lo escribimos

Nos pide una contraseña, se la escribimos y estos van a ser el usuairo y contraseña para el panel de administración.

Luego levantas el servidor y ya puedes ingresar con el usuario y contraseña qe acabas de ingresar.

Al ingresar la primera vez podemos crear usuarios y grupos.

Y como ya agregamos los modelos también deberíamos poder ver las tablas para administrarlas desde el panel de administración.

Ahora desde el panel de administración podemos borrar registros, agregar registros, y editar registros de una forma gráfica.

PONER CAMPOS DE TABLAS OPCIONALES:

Debemos tener en cuenta que Django hace que todos los campos de las tablas sean requeridos, para hacer un campo opcional hacemos lo siguiente:

Nos vamos al modelo y buscamos el campo en la tabla y en el argumento del campo incluimos los siguientes campos:

email = models.EmailField(blank=True, null=True)

Como se hicieron cambios en el modelo se debe hacer la migración de los datos de la siguiente manera:

se baja el servidor y en el cmd se digita:

python manage.py makemigrations

y luego

python manage.py migrate


luego arrancar el servidor y ya se debe reflejar en el panel de administración y permitir dejar el campo en blanco.

***CAMBIAR NOMBRES DE LOS CAMPOS DE TABLAS EN PANEL DE ADMINISTRACIÓN

Si queremos que en el panel de administración aparezcan las tablas con otro nombre, lo podemos hacer de la siguiente manera:

Buscamos la tabla en el modelo (archivo models.py) y en los argumentos del campo ponemos:

verbose_name='xxx', de la siguiente manera:

direccion = models.CharField(max_length=50, verbose_name='La dirección')

Actualizamos en el panel de administración y ya se debe ver reflejado el cambio.

Para que en la tabla en el panel de administración nos aparezca el nombre de los campos en formato texto, debemos definir en el modelo una función str, de la siguiente forma:

def __str__(self):
	return self.nombre

Luego se debe hacer una migración porque hemos hecho cambios en la estructura del modelo:

bajar el servidor
digitar en el cmd python manage.py makemigrations
y luego python manage.py migrate



***AGREGAR CAMPOS DE TABLAS A MODIFICAR
Si queremos que en el panel de administración aparezcan otros campos en una tabla como telefono o dirección, debemos hacer lo siguiente:

Nos vamos a el archivo admin y creamos una clase que herede de la clase admin.ModelAdmin

Luego uusamos el mettodo listt_display para que nos muesttre los campos que queramos poniendolos exactamente como aparecen en el modelo y luego registramos la clase en el modelo: 

class ClientesAdmin(admin.ModelAdmin):
	list_display=('nombre','direccion','tfno')

admin.site.register(ClientesAdmin)

Luego detenemos el servidor y hhacemos las migraciones en el modelo:


**AGREGAR UNA CASILLA DE BUSQUEDA EN EL PANEL DE ADMINISTRACIÓN:

Nos vamos a admin.py y agregar dentro de la misma  clase que acabamos de crear anteriormente:

search_fields=('nombre','tfono')


***AGREGAR FILTROS
vamos a agregar un filtro que permita ver registros por seccion:

Nos vamos al archivo de admin.py y crear una nueva clase llamada ArticulosAdmin que hereda de admin.ModelAdmin

class ArticulosAdmin(admin.ModelAdmin):
	list_filter=('seccion',)

En el List_filter ponemos el campo por el cual vamos a filtrar.

Adicional podemos agregar un filtro por meses y lo hacemos de la siguiente manera:

Debajo de list_filter agregamos la siguiente sentencia:

date_hierarchy='fecha'

***CAMBIAR IDIOMA DEL PANEL

Nos vamos al archivo settings.py y localizamos la instruccion 
LANGUAGE_CODE = 'en-us' y la cambiamos por:
LANGUAGE_CODE = 'es-eu'


***PERSONALIZACION DEL PANEL DE ADMINISTRACION

Agregar Usuarios

Nos vamos a la tabla de usuarios y agregamos usuarios, alli podemos dar la opción de si es Staff o no, lo de staff es si puede ingresar al panel de administración.

otroUsuario
ParaAdministrar2021*

Agregar Grupos
Si tengo muchos usuarios y deseo darle los mismos permisos a a un grupo grande de ellos, entonces puedo crear un grupo para asignarle unos permisos y luego incluir los usuarios en el grupo.

Para esto me voy a grupos creo el grupo le asigno los permisos que deseo que tenga y luego me voy a uusuario e incluyo los usuarios que desee dentro del grupo.





